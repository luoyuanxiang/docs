import{_ as a,c as t,o as e,a7 as l}from"./chunks/framework.CdooE4P4.js";const o="/docs/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5.png",i="/docs/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5.png",m=JSON.parse('{"title":"进程的通信","description":"","frontmatter":{"title":"进程的通信","date":"2024-08-18 15:36"},"headers":[],"relativePath":"系统架构师/01-计算机基础/03-进程管理/02-进程的通信.md","filePath":"系统架构师/01-计算机基础/03-进程管理/02-进程的通信.md","lastUpdated":1724246094000}'),E={name:"系统架构师/01-计算机基础/03-进程管理/02-进程的通信.md"},r=l('<h1 id="进程的通信" tabindex="-1">进程的通信 <a class="header-anchor" href="#进程的通信" aria-label="Permalink to &quot;进程的通信&quot;">​</a></h1><h2 id="进程的互斥" tabindex="-1">进程的互斥 <a class="header-anchor" href="#进程的互斥" aria-label="Permalink to &quot;进程的互斥&quot;">​</a></h2><p>进程的互斥是指系统中多个进程因争用临界资源而互斥执行。临界资源是指一次只能供一个进程使用的资源，如打印机。</p><p><img src="'+o+'" alt=""></p><h2 id="进程的同步" tabindex="-1">进程的同步 <a class="header-anchor" href="#进程的同步" aria-label="Permalink to &quot;进程的同步&quot;">​</a></h2><p>在系统中有一下进程是需要互相合作，协同工作的。这样的进程之间的联系就叫同步。</p><p><img src="'+i+'" alt=""></p><h2 id="pv-操作" tabindex="-1">PV 操作 <a class="header-anchor" href="#pv-操作" aria-label="Permalink to &quot;PV 操作&quot;">​</a></h2><ol><li>P 操作： <ol><li>将信号量 S 的值减1，即S=S-1</li><li>如果S&gt;=0，则该进程继续执行；否则该进程置为等待状态。</li></ol></li><li>V 操作： <ol><li>将信号量S的值加1，即S=S+1；</li><li>如果S&gt;0该进程继续执行；否则说明有等待队列中有等待进程，需要唤醒等待进程。</li></ol></li></ol><div class="tip custom-block github-alert"><p class="custom-block-title">信号量S的物理意义：S&gt;=0表示某资源的可用数，若S&lt;0，则其绝对值表示组赛队列中等待该资源的进程数。</p><p></p></div>',10),s=[r];function c(_,B,n,d,p,h){return e(),t("div",null,s)}const u=a(E,[["render",c]]);export{m as __pageData,u as default};
